@model UTP.PortalEmpleabilidad.Modelo.Vistas.Empresa.VistaRegistroEmpresa
<div class="row">
    <div class="col-sm-12" style="text-align:right;">
        <button class="btn btn-default color-paleta2" data-toggle="modal" data-target="#nuevaEmpresa">Nueva Empresa</button>
    </div>
</div>


<!-- Modal -->
<div class="modal fade" id="nuevaEmpresa" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Nueva Empresa</h4>
            </div>
@using (Html.BeginForm("_EmpresaNuevaModal", "UTP", FormMethod.Post))
{
    @Html.AntiForgeryToken()
            <div class="modal-body">
                <div class="row">
                    <div class="col-sm-8">
                        <div class="input-group">
                            <span class="input-group-addon">(*) Nombre<br />Comercial</span>
                            @*<input type="text" class="form-control fuente-pequeña" placeholder="Nombre Comercial de la Empresa">*@
                            @Html.TextBoxFor(model => model.NombreComercial, new { @class = "form-control", @placeholder = "Nombre Comercial de la Empresa" })
                        </div>@Html.ValidationMessageFor(model => model.NombreComercial, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-8">
                        <div class="input-group">
                            <span class="input-group-addon fuente-pequeña">(*) Razón<br />Social</span>
                            @*<input type="text" class="form-control fuente-pequeña" placeholder="Razón Social de la Empresa">*@
                            @Html.TextBoxFor(model => model.RazonSocial, new { @class = "form-control", @placeholder = "Razón Social de la Empresa" })

                        </div>@Html.ValidationMessageFor(model => model.RazonSocial, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4">
                        <div class="input-group">
                            <span class="input-group-addon fuente-pequeña">(*) RUC</span>
                            @*<input type="text" class="form-control fuente-pequeña" placeholder="Identificador Tributario">*@
                            @Html.TextBoxFor(model => model.IdentificadorTributario, new { @class = "form-control", @placeholder = "Identificador Tributario" })
                        </div>@Html.ValidationMessageFor(model => model.IdentificadorTributario, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-4">
                        <div class="input-group">
                            <span class="input-group-addon fuente-pequeña">(*) País</span>
                            @Html.DropDownListFor(m => m.PaisIdListaValor, null, "- Seleccione País -", htmlAttributes: new { @class = "form-control" })
                        </div>@Html.ValidationMessageFor(model => model.PaisIdListaValor, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-4">
                        <div class="input-group fuente-pequeña">
                            <span class="input-group-addon fuente-pequeña">(*) Sector</span>
                            @Html.DropDownListFor(m => m.SectorEmpresarial1IdListaValor, null, "- Seleccione Sector Empresarial -", htmlAttributes: new { @class = "form-control" })
                        </div>@Html.ValidationMessageFor(model => model.SectorEmpresarial1IdListaValor, "", new { @class = "text-danger" })
                    </div>

                </div>
                @*<br />
        <h5>Datos de su ubicación</h5>
        <hr />*@
                <div class="row">
                    <div class="col-sm-4">
                        <div class="input-group fuente-pequeña">
                            <span class="input-group-addon fuente-pequeña">(*) Tipo<br />Ubicación</span>
                            @Html.DropDownListFor(m => m.TipoLocacionIdListaValor, null, "- Seleccione Tipo de Ubicación -", htmlAttributes: new { @class = "form-control" })

                        </div>@Html.ValidationMessageFor(model => model.TipoLocacionIdListaValor, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row" id="divUbigeoConCombos">
                    <div class="col-sm-4">
                        <div class="input-group fuente-pequeña">
                            <span class="input-group-addon fuente-pequeña">(*)<br />Departam.</span>
                           @Html.DropDownList("DireccionDepartamentoLocacion", ViewData["Departamento"] as List<SelectListItem>, "-Seleccione-", new { @class = "form-control", @id = "DireccionDepartamentoLocacion" })
                           
                        </div>@Html.ValidationMessageFor(model => model.DireccionDepartamentoLocacion, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-4">
                        <div class="input-group fuente-pequeña">
                            <span class="input-group-addon fuente-pequeña">(*) Ciudad</span>
                           @Html.DropDownList("DireccionCiudadLocacion", new SelectList(string.Empty, "Value", "Text"), "-Seleccione-", new { @class = "form-control", @id = "DireccionCiudadLocacion" })


                        </div>@Html.ValidationMessageFor(model => model.DireccionCiudadLocacion, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-4">
                        <div class="input-group fuente-pequeña">
                            <span class="input-group-addon fuente-pequeña">(*) Distrito</span>
                            @Html.DropDownList("DireccionDistritoLocacion", new SelectList(string.Empty, "Value", "Text"), "-Seleccione-", new { @class = "form-control", @id = "DireccionDistritoLocacion" })

                        </div>@Html.ValidationMessageFor(model => model.DireccionDistritoLocacion, "", new { @class = "text-danger" })
                    </div>
                </div>

                <!--Por defecto el div está oculto-->
                <div class="row" id="divUbigeoConCajasDeTexto" style="display:none;">

                    <!--Aca van las tres columnas y cada una con su caja de texto-->
                    <div class="col-sm-4">
                        <div class="input-group fuente-pequeña">
                            <span class="input-group-addon fuente-pequeña">(*)<br />Departam.</span>

                            @Html.TextBoxFor(model => model.DireccionDepartamentoLocacion, new { @class = "form-control", @placeholder = "Ingrese Departamento/Región/Estado" })

                        </div>@Html.ValidationMessageFor(model => model.DireccionDepartamentoLocacion, "", new { @class = "text-danger" })

                    </div>
                    <div class="col-sm-4">
                        <div class="input-group fuente-pequeña">
                            <span class="input-group-addon fuente-pequeña">(*) Ciudad</span>

                            @Html.TextBoxFor(model => model.DireccionCiudadLocacion, new { @class = "form-control", @placeholder = "Ingrese Ciudad/Provincia" })

                        </div>@Html.ValidationMessageFor(model => model.DireccionCiudadLocacion, "", new { @class = "text-danger" })

                    </div>
                    <div class="col-sm-4">

                        <div class="input-group fuente-pequeña">
                            <span class="input-group-addon fuente-pequeña">(*) Distrito</span>

                            @Html.TextBoxFor(model => model.DireccionDistritoLocacion, new { @class = "form-control", @placeholder = "Ingrese Distrito/Comuna" })

                        </div>@Html.ValidationMessageFor(model => model.DireccionDistritoLocacion, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <div class="input-group fuente-pequeña">
                            <span class="input-group-addon fuente-pequeña">(*)<br />Dirección</span>
                            @*<input type="text" class="form-control fuente-pequeña" placeholder="Ingrese Dirección. Ej: Avenida Las Palmeras 123, Urbanización El Palmeral">*@
                            @Html.TextBoxFor(model => model.DireccionLocacion, new { @class = "form-control", @placeholder = "Ingrese Dirección. Ej: Avenida Las Palmeras 123, Urbanización El Palmeral" })
                        </div>@Html.ValidationMessageFor(model => model.DireccionLocacion, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-default color-paleta2">Guardar</button>
            </div>
}
        </div>
    </div>
    <hr />

</div>

<script>
    //Este bloque sólo debe ir una vez, esto quiere decir que todo lo de adentro se ejecuta cuando toda la pagina se renderiza o muestra al c liente.
    $(document).ready(function () {

        //Combo de departamento.
        $('#DireccionDepartamentoLocacion').on('change', function () {

            //Se obtiene el texto del combo.
            var TextDepartamento = $("#DireccionDepartamentoLocacion option:selected").text();

            //Se guarda el valor en el hidden TextoDepartamento.
            $('#TextoDepartamento').val(TextDepartamento);
        });



        //Combo de provincia.
        $('#DireccionCiudadLocacion').on('change', function () {

            //Se obtiene el texto del combo.
            var TextCiudad = $("#DireccionCiudadLocacion option:selected").text();

            //Se guarda el valor en el hidden TextoDepartamento.
            $('#TextoCiudad').val(TextCiudad);
        });

        //combo de distrito.
        $('#DireccionDistritoLocacion').on('change', function () {

            //Se obtiene el texto del combo.
            var TextDistrito = $("#DireccionDistritoLocacion option:selected").text();

            //Se guarda el valor en el hidden TextoDepartamento.
            $('#TextDistrito').val(TextDistrito);
        });

    });

</script>



<script>
    $(document).ready(function ()
    {

        $('#PaisIdListaValor').on('change', function()

        {
            var idPais = $("#PaisIdListaValor").val()
            //alert(idPais);
            console.log(idPais);

            if (idPais == "PAIPER")
            {
                console.log('peru');
                $("#divUbigeoConCombos").css('display', 'block');       //los combos se muestran
                $("#divUbigeoConCajasDeTexto").css('display', 'none'); //las cajas se ocultan
            }
            else
            {
                console.log('otro');
                $("#divUbigeoConCombos").css('display', 'none');        //los combos se ocultan
                $("#divUbigeoConCajasDeTexto").css('display', 'block'); //las cajas se muestran
            }

    }
        )}  );
</script>

<script type="text/javascript">
    $(document).ready(function () {

        $("#DireccionDepartamentoLocacion").change(function () {
            $("#DireccionCiudadLocacion").empty();


            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetStateProvincia","Home")', // we are calling json method

                dataType: 'json',

                data: { IDListaValorPadre: $("#DireccionDepartamentoLocacion").val() },

                // here we are get value of selected country and passing same value
                //as inputto json method GetStates.

                success: function (states) {
                    // states contains the JSON formatted list
                    // of states passed from the controller

                    $("#DireccionCiudadLocacion").append('<option selected value="0">Seleccione</option>');

                    //$("#Distrito").empty();
                    //$("#Distrito").append('<option selected value="0">Seleccione</option>');

                    $.each(states, function (i, state) {
                        $("#DireccionCiudadLocacion").append('<option value="' + state.Value + '">' +
                         state.Text + '</option>');
                        // here we are adding option for States

                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }
            });
            return false;


        })
    });
</script>

<script type="text/javascript">
    $(document).ready(function () {

        $("#DireccionCiudadLocacion").change(function () {
            $("#DireccionDistritoLocacion").empty();


            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetStateProvincia", "Home")', // we are calling json method

                dataType: 'json',

                data: { IDListaValorPadre: $("#DireccionCiudadLocacion").val() },

                // here we are get value of selected country and passing same value
                //as inputto json method GetStates.

                success: function (states) {
                    // states contains the JSON formatted list
                    // of states passed from the controller

                    $("#DireccionDistritoLocacion").append('<option selected value="0">Seleccione</option>');

                    //$("#Distrito").empty();
                    //$("#Distrito").append('<option selected value="0">Seleccione</option>');

                    $.each(states, function (i, state) {
                        $("#DireccionDistritoLocacion").append('<option value="' + state.Value + '">' +
                         state.Text + '</option>');
                        // here we are adding option for States

                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }
            });
            return false;


        })
    });
</script>